{
  "_args": [
    [
      {
        "raw": "cavy",
        "scope": null,
        "escapedName": "cavy",
        "name": "cavy",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/kyebracey/projects/RememberAll"
    ]
  ],
  "_from": "cavy@latest",
  "_id": "cavy@0.4.0",
  "_inCache": true,
  "_location": "/cavy",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cavy-0.4.0.tgz_1495823999299_0.5686809022445232"
  },
  "_npmUser": {
    "name": "pixielabs",
    "email": "team@pixielabs.io"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cavy",
    "scope": null,
    "escapedName": "cavy",
    "name": "cavy",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/cavy/-/cavy-0.4.0.tgz",
  "_shasum": "60fb4f6c2b2d79d08c495dcfb3b4a813a98ee1cc",
  "_shrinkwrap": null,
  "_spec": "cavy",
  "_where": "/Users/kyebracey/projects/RememberAll",
  "author": {
    "name": "Pixie Labs"
  },
  "bugs": {
    "url": "https://github.com/pixielabs/cavy/issues"
  },
  "dependencies": {},
  "description": "An integration test framework for React Native.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "60fb4f6c2b2d79d08c495dcfb3b4a813a98ee1cc",
    "tarball": "https://registry.npmjs.org/cavy/-/cavy-0.4.0.tgz"
  },
  "gitHead": "f2099db0e46e4859fe94708a763503d8336802c1",
  "homepage": "https://github.com/pixielabs/cavy#readme",
  "keywords": [
    "react",
    "react native",
    "ios",
    "android",
    "integration tests",
    "testing",
    "test",
    "specs"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "pixielabs",
      "email": "team@pixielabs.io"
    }
  ],
  "name": "cavy",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": "0.40.x"
  },
  "readme": "# Cavy\n\n[![npm version](https://badge.fury.io/js/cavy.svg)](https://badge.fury.io/js/cavy)\n\n![Cavy logo](https://cloud.githubusercontent.com/assets/126989/22546798/6cf18938-e936-11e6-933f-da756b9ee7b8.png)\n\n**Cavy** is a cross-platform integration test framework for React Native, by\n[Pixie Labs](http://pixielabs.io).\n\n## How does it work?\n\nCavy (ab)uses React `ref` generating functions to give you the ability to refer\nto, and simulate actions upon, deeply nested components within your\napplication. Unlike a tool like [enzyme](https://github.com/airbnb/enzyme)\nwhich uses a simulated renderer, Cavy runs within your live application as it\nis running on a host device (e.g. your Android or iOS simulator).\n\nThis allows you to do far more accurate integration testing than if you run\nyour React app within a simulated rendering environment.\n\n### Where does it fit in?\n\nWe built Cavy because, at the time of writing, React Native had only a handful\nof testing approaches available:\n\n1. Unit testing components ([Jest](https://github.com/facebook/jest)).\n2. Shallow-render testing components ([enzyme](https://github.com/airbnb/enzyme)).\n3. Testing within your native environment, using native JS hooks ([Appium](http://appium.io/)).\n4. Testing completely within your native environment ([XCTest](https://developer.apple.com/reference/xctest)).\n\nCavy fits in between shallow-render testing and testing within your native\nenvironment.\n\n### Cavy's components\n\nCavy provides 3 tools to let you run integration tests:\n\n1. A store of 'test hooks'; key-value pairs between a string identifier and a\n   component somewhere in your app component tree.\n2. A set of helper functions to write spec files.\n3. A `<Tester>` component you wrap around your entire app to make the test hook\n   store available, and autorun your test cases on boot.\n\n## Installation\n\nTo get started using Cavy, install it using `yarn`:\n\n    yarn add cavy --dev\n\nor `npm`:\n\n    npm i --save-dev cavy\n\n## Basic usage\n\nCheck out [the sample app](https://github.com/pixielabs/cavy/tree/master/sample-app/EmployeeDirectory) for example usage. Here it is running:\n\n![Sample app running](https://cloud.githubusercontent.com/assets/126989/22829358/193b5c0a-ef9a-11e6-994e-d4df852a6181.gif)\n\n### Hook up components for testing\n\nAdd 'hooks' to any components you want to test by adding a `ref` and using the\n`generateTestHook` function.\n\n`generateTestHook` takes a string as its first argument - this is the identifier\nto be used in tests. It takes an optional second argument in case you want to\nset your own `ref` generating function.\n\nStateless functional components cannot be assigned a `ref` since they don't have\ninstances. Use the `wrap` function to wrap them inside a non-stateless component.\n\n```javascript\nimport React, { Component } from 'react';\nimport { TextInput } from 'react-native';\nimport { FuncComponent } from 'somewhere';\n\nimport { hook, wrap } from 'cavy';\n\nclass Scene extends Component {\n  render() {\n    const WrappedComponent = wrap(FuncComponent);\n    return (\n      <View>\n        <TextInput\n          ref={this.props.generateTestHook('Scene.TextInput')}\n          onChangeText={...}\n        />\n        <WrappedComponent\n          ref={this.props.generateTestHook('Scene.Component')}\n          onPress={...}\n        />\n      </View>      \n    );\n  }\n}\n\nconst TestableScene = hook(Scene);\nexport default TestableScene;\n```\n\n### Write your test cases\n\nUsing your component identifiers, write your spec functions. We suggest saving\nthese in a spec folder, naming them something like `./specs/AppSpec.js`.\n\n```javascript\nexport default function(spec) {\n  spec.describe('My feature', function() {\n    spec.it('works', async function() {\n      await spec.fillIn('Scene.TextInput', 'some string')\n      await spec.press('Scene.button');\n      await spec.exists('NextScene')\n    });\n  });\n}\n```\n\n[See below](#available-spec-helpers) for a list of currently available spec\nhelper functions.\n\n### Set up your test wrapper\n\nImport `Tester`, `TestHookStore` and your specs in your top-level JS file\n(typically this is your `index.{ios,android}.js` files), and instantiate a new\n`TestHookStore`.\n\nWrap your app in a Tester component, passing in the `TestHookStore` and an array\ncontaining your imported spec functions.\n\nOptional props:\n\n`waitTime`          - Integer, the time in milliseconds that your tests should\n                      wait to find specified 'hooked' components.\n                      Set to `2000` (2 seconds) by default.\n\n`startDelay`        - Integer, the time in milliseconds before test execution\n                      begins. Set to `0` by default.\n\n`clearAsyncStorage` - Boolean, set this to `true` to clear AsyncStorage between\n                      each test e.g. to remove a logged in user.\n                      Set to `false` by default.\n\n```javascript\nimport React, { Component } from 'react';\nimport { AppRegistry } from 'react-native';\nimport { Tester, TestHookStore } from 'cavy';\nimport AppSpec from './specs/AppSpec';\nimport App from './app';\n\nconst testHookStore = new TestHookStore();\n\nexport default class AppWrapper extends Component {\n  render() {\n    return (\n      <Tester specs={[AppSpec]} store={testHookStore} waitTime={4000}>\n        <App />\n      </Tester>\n    );\n  }\n}\n\nAppRegistry.registerComponent('AppWrapper', () => AppWrapper);\n```\n\n**Congratulations! You are now all set up to start testing your app with Cavy.**\n\nYour tests will run automatically when you run your app using either:\n\n    $ react-native run-ios\n\nor\n\n    $ react-native run-android\n\n## Available spec helpers\n\n`fillIn(identifier, str)` - fills in the identified 'TextInput'-compatible\ncomponent with the provided string (str). Your component must respond to the\nproperty `onChangeText`.\n\n`press(identifier)` - presses the identified component. Your component must\nrespond to the property `onPress`.\n\n`pause(integer)` - pauses the running test for the length of time, specified in\nmilliseconds (integer). This is useful if you need to allow time for a response\nto be received before progressing.\n\n`exists(identifier)` - returns `true` if the component can be identified (i.e.\nis currently on screen).\n\n`notExists(identifier)` - as above, but checks for the absence of the\ncomponent.\n\n`findComponent(identifier)` - returns the identified component. This function\nshould be used if your testable component does not respond to either\n`onChangeText` or `onPress`, for example:\n\n```javascript\npicker = await spec.findComponent('Scene.modalPicker');\npicker.open();\n```\n\n## FAQs\n\n#### How does Cavy compare to Appium? What is the benefit?\n\nCavy is a comparable tool to Appium. The key difference is that Appium uses\nnative hooks to access components (accessibility IDs), wheras Cavy uses React\nNative refs. This means that Cavy sits directly within your React Native\nenvironment (working identically with both Android and iOS builds), making it\neasy to integrate into your application very quickly, without much\noverhead.\n\n#### What does this allow me to do that Jest does not?\n\nJest is a useful tool for unit testing individual React Native components,\nwhereas Cavy is an integration testing tool allowing you to run end-to-end user\ninterface tests.\n\n#### How about supporting stateless components?\n\nWe'd love for Cavy to be better compatible with stateless functional components\nand would be more than happy to see its reliance on refs replaced with something\nbetter suited to the task...\nWhat that looks like specifically, we're not 100% sure yet. We're very happy to\ndiscuss possible alternatives!\n\n## Contributing\n\n- Check out the latest master to make sure the feature hasn't been implemented\n  or the bug hasn't been fixed yet.\n- Check out the issue tracker to make sure someone already hasn't requested it\n  and/or contributed it.\n- Fork the project.\n- Start a feature/bugfix branch.\n- Commit and push until you are happy with your contribution.\n- Please try not to mess with the package.json, version, or history. If you\n  want to have your own version, or is otherwise necessary, that is fine, but\n  please isolate to its own commit so we can cherry-pick around it.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pixielabs/cavy.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.4.0"
}
